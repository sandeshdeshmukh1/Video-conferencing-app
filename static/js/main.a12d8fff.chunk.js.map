{"version":3,"sources":["component/Loader.jsx","App.js","serviceWorker.js","index.js"],"names":["Loader","className","App","props","handleroomChange","e","setState","displayName","target","value","handlenameChange","roomName","handlepasswordChange","password","handleCall","onCall","state","this","loadingComponent","containerStyle","display","alignItems","justifyContent","marginLeft","Fragment","Card","style","padding","marginTop","width","textAlign","noValidate","autoComplete","TextField","type","onChange","label","Button","variant","color","onClick","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RASeA,EANA,WACX,OACI,yBAAKC,UAAU,Y,4CCyFRC,E,kDA7Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAZrB,EAcnBC,iBAAmB,SAACL,GAClB,EAAKC,SAAS,CAAEK,SAAUN,EAAEG,OAAOC,SAflB,EAiBnBG,qBAAuB,SAACP,GACtB,EAAKC,SAAS,CAAEO,SAAUR,EAAEG,OAAOC,SAlBlB,EAoBnBK,WAAa,SAACT,GACZ,EAAKC,SAAS,CAAES,QAAQ,KAnBxB,EAAKC,MAAQ,CACXT,YAAa,GACbI,SAAU,GACVE,SAAU,GACVE,QAAQ,GANO,E,qDAwBT,IAAD,OAEP,OACE,yBAAKd,UAAU,kBACb,yBAAKA,UAAU,QACZgB,KAAKD,MAAMD,OAER,kBAAC,IAAD,CACEJ,SAAUM,KAAKD,MAAML,SACrBJ,YAAaU,KAAKD,MAAMT,YACxBM,SAAUI,KAAKD,MAAMH,SACrBK,iBAAkBlB,EAClBmB,eAAgB,CACdC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,WAAY,WAIhB,kBAAC,IAAMC,SAAP,KAEE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,QAAS,OAAQC,UAAW,OAAQC,MAAO,QAASP,eAAgB,SAAUQ,UAAW,SAAUP,WAAY,UAC5H,mDACA,0BAAMQ,YAAU,EAACC,aAAa,OAC5B,kBAACC,EAAA,EAAD,CAAWC,KAAK,OAAOzB,MAAOQ,KAAKD,MAAML,SAAUwB,SAAU,SAAC9B,GAAD,OAAO,EAAKK,iBAAiBL,IAAI+B,MAAM,qBAEtG,0BAAML,YAAU,EAACC,aAAa,OAC5B,kBAACC,EAAA,EAAD,CAAWC,KAAK,OAAOzB,MAAOQ,KAAKD,MAAMT,YAAa4B,SAAU,SAAC9B,GAAD,OAAO,EAAKD,iBAAiBC,IAAI+B,MAAM,wBAEzG,0BAAML,YAAU,EAACC,aAAa,OAC5B,kBAACC,EAAA,EAAD,CAAWC,KAAK,OAAOzB,MAAOQ,KAAKD,MAAMH,SAAUsB,SAAU,SAAC9B,GAAD,OAAO,EAAKO,qBAAqBP,IAAI+B,MAAM,oBAG1G,kBAACC,EAAA,EAAD,CAAQX,MAAO,CAAEE,UAAW,QAAUU,QAAQ,YAAYC,MAAM,UAAUC,QAAS,SAACnC,GAAD,OAAO,EAAKS,WAAWT,IAAI6B,KAAK,UAAnH,qBAOV,yBAAKjC,UAAU,UACb,4DACA,gDAAqB,uBAAGwC,KAAK,8DAAR,qE,GAvEbC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a12d8fff.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className='loader'></div>\r\n    );\r\n}\r\n\r\nexport default Loader;\r\n","\nimport React, { Component } from 'react';\nimport Loader from './component/Loader'\nimport Jitsi from 'react-jitsi'\nimport './App.css'\nimport Card from '@material-ui/core/Card';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\n\n\n\n\nclass App extends Component {\n\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayName: '',\n      roomName: '',\n      password: '',\n      onCall: false,\n    }\n  }\n\n\n  handleroomChange = (e) => {\n    this.setState({ displayName: e.target.value })\n  }\n  handlenameChange = (e) => {\n    this.setState({ roomName: e.target.value })\n  }\n  handlepasswordChange = (e) => {\n    this.setState({ password: e.target.value })\n  }\n  handleCall = (e) => {\n    this.setState({ onCall: true })\n  }\n    ;\n  render() {\n\n    return (\n      <div className=\"main-container\">\n        <div className='main'>\n          {this.state.onCall\n            ? (\n              <Jitsi\n                roomName={this.state.roomName}\n                displayName={this.state.displayName}\n                password={this.state.password}\n                loadingComponent={Loader}\n                containerStyle={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  marginLeft: '15rem'\n                }}\n              />)\n            : (\n              <React.Fragment>\n\n                <Card style={{ padding: '3rem', marginTop: '5rem', width: '200px', justifyContent: 'center', textAlign: 'center', marginLeft: '30rem' }} >\n                  <h1>Create Your Meeting</h1>\n                  <form noValidate autoComplete=\"off\">\n                    <TextField type='text' value={this.state.roomName} onChange={(e) => this.handlenameChange(e)} label=\"Enter Room Name\" />\n                  </form>\n                  <form noValidate autoComplete=\"off\">\n                    <TextField type='text' value={this.state.displayName} onChange={(e) => this.handleroomChange(e)} label=\"Enter Display Name\" />\n                  </form>\n                  <form noValidate autoComplete=\"off\">\n                    <TextField type='text' value={this.state.password} onChange={(e) => this.handlepasswordChange(e)} label=\"Enter Password\" />\n                  </form>\n\n                  <Button style={{ marginTop: '2rem' }} variant=\"contained\" color=\"primary\" onClick={(e) => this.handleCall(e)} type='submit'> Let&apos;s start! </Button>\n                </Card>\n\n              </React.Fragment>\n            )}\n        </div>\n\n        <div className='footer'>\n          <h3>Created By Sandesh Deshmukh </h3>\n          <small>Project link- <a href=\"https://github.com/sandeshdeshmukh1/Video-conferencing-app\">https://github.com/sandeshdeshmukh1/Video-conferencing-app</a></small>\n\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-app-polyfill/ie11'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}